/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022.8.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  TokenObtainPair,
  TokenPair,
  TokenRefresh,
  TokenVerify,
  VerifiedTokenObtainPair,
} from '../models';
import {
    TokenObtainPairFromJSON,
    TokenObtainPairToJSON,
    TokenPairFromJSON,
    TokenPairToJSON,
    TokenRefreshFromJSON,
    TokenRefreshToJSON,
    TokenVerifyFromJSON,
    TokenVerifyToJSON,
    VerifiedTokenObtainPairFromJSON,
    VerifiedTokenObtainPairToJSON,
} from '../models';

export interface AuthenticateRequest {
    tokenObtainPair: TokenObtainPair;
}

export interface GetVerifiedTokenRequest {
    verifiedTokenObtainPair: VerifiedTokenObtainPair;
}

export interface RefreshTokenRequest {
    tokenRefresh: TokenRefresh;
}

export interface VerifyTokenRequest {
    tokenVerify: TokenVerify;
}

/**
 * 
 */
export class APIApi extends runtime.BaseAPI {

    /**
     * Authenticate the user and return a token pair
     * Obtain auth token pair
     */
    async authenticateRaw(requestParameters: AuthenticateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenPair>> {
        if (requestParameters.tokenObtainPair === null || requestParameters.tokenObtainPair === undefined) {
            throw new runtime.RequiredError('tokenObtainPair','Required parameter requestParameters.tokenObtainPair was null or undefined when calling authenticate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/token`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenObtainPairToJSON(requestParameters.tokenObtainPair),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenPairFromJSON(jsonValue));
    }

    /**
     * Authenticate the user and return a token pair
     * Obtain auth token pair
     */
    async authenticate(requestParameters: AuthenticateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenPair> {
        const response = await this.authenticateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Data References
     */
    async dataRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/references`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Data References
     */
    async data(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.dataRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a verified JWT token pair by submitting a Two-Factor authentication code.
     * Get verified JWT token
     */
    async getVerifiedTokenRaw(requestParameters: GetVerifiedTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenPair>> {
        if (requestParameters.verifiedTokenObtainPair === null || requestParameters.verifiedTokenObtainPair === undefined) {
            throw new runtime.RequiredError('verifiedTokenObtainPair','Required parameter requestParameters.verifiedTokenObtainPair was null or undefined when calling getVerifiedToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/token/verified`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: VerifiedTokenObtainPairToJSON(requestParameters.verifiedTokenObtainPair),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenPairFromJSON(jsonValue));
    }

    /**
     * Get a verified JWT token pair by submitting a Two-Factor authentication code.
     * Get verified JWT token
     */
    async getVerifiedToken(requestParameters: GetVerifiedTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenPair> {
        const response = await this.getVerifiedTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Instance Metadata
     */
    async pingRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Instance Metadata
     */
    async ping(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.pingRaw(initOverrides);
        return await response.value();
    }

    /**
     * Authenticate the user and return a token pair
     * Refresh auth token
     */
    async refreshTokenRaw(requestParameters: RefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TokenPair>> {
        if (requestParameters.tokenRefresh === null || requestParameters.tokenRefresh === undefined) {
            throw new runtime.RequiredError('tokenRefresh','Required parameter requestParameters.tokenRefresh was null or undefined when calling refreshToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/token/refresh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenRefreshToJSON(requestParameters.tokenRefresh),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TokenPairFromJSON(jsonValue));
    }

    /**
     * Authenticate the user and return a token pair
     * Refresh auth token
     */
    async refreshToken(requestParameters: RefreshTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TokenPair> {
        const response = await this.refreshTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify an existent authentication token
     * Verify token
     */
    async verifyTokenRaw(requestParameters: VerifyTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters.tokenVerify === null || requestParameters.tokenVerify === undefined) {
            throw new runtime.RequiredError('tokenVerify','Required parameter requestParameters.tokenVerify was null or undefined when calling verifyToken.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/token/verify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TokenVerifyToJSON(requestParameters.tokenVerify),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Verify an existent authentication token
     * Verify token
     */
    async verifyToken(requestParameters: VerifyTokenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.verifyTokenRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
