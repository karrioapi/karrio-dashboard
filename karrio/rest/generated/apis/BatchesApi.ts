/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022.8.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BatchOperation,
  BatchOperations,
  ErrorResponse,
} from '../models';
import {
    BatchOperationFromJSON,
    BatchOperationToJSON,
    BatchOperationsFromJSON,
    BatchOperationsToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface ImportFileRequest {
    dataFile?: Blob;
    dataTemplate?: string;
    resourceType?: ImportFileResourceTypeEnum;
    resourceType2?: string;
    dataTemplate2?: string;
    dataFile2?: Blob;
}

export interface RetrieveRequest {
    id: string;
}

/**
 * 
 */
export class BatchesApi extends runtime.BaseAPI {

    /**
     * Import csv, xls and xlsx data files for:<br/> - tracking data - orders data - shipments data - billing data (soon)<br/><br/> **This operation will return a batch operation that you can poll to follow the import progression.**
     * Import data files
     */
    async importFileRaw(requestParameters: ImportFileRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BatchOperation>> {
        const queryParameters: any = {};

        if (requestParameters.dataFile !== undefined) {
            queryParameters['data_file'] = requestParameters.dataFile;
        }

        if (requestParameters.dataTemplate !== undefined) {
            queryParameters['data_template'] = requestParameters.dataTemplate;
        }

        if (requestParameters.resourceType !== undefined) {
            queryParameters['resource_type'] = requestParameters.resourceType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.resourceType2 !== undefined) {
            formParams.append('resource_type', requestParameters.resourceType2 as any);
        }

        if (requestParameters.dataTemplate2 !== undefined) {
            formParams.append('data_template', requestParameters.dataTemplate2 as any);
        }

        if (requestParameters.dataFile2 !== undefined) {
            formParams.append('data_file', requestParameters.dataFile2 as any);
        }

        const response = await this.request({
            path: `/v1/batches/data/import`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BatchOperationFromJSON(jsonValue));
    }

    /**
     * Import csv, xls and xlsx data files for:<br/> - tracking data - orders data - shipments data - billing data (soon)<br/><br/> **This operation will return a batch operation that you can poll to follow the import progression.**
     * Import data files
     */
    async importFile(requestParameters: ImportFileRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BatchOperation> {
        const response = await this.importFileRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all batch operations.
     * List all batch operations
     */
    async listRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BatchOperations>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/batches`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BatchOperationsFromJSON(jsonValue));
    }

    /**
     * Retrieve all batch operations.
     * List all batch operations
     */
    async list(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BatchOperations> {
        const response = await this.listRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a batch operation.
     * Retrieve a batch operation
     */
    async retrieveRaw(requestParameters: RetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BatchOperation>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/batches/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BatchOperationFromJSON(jsonValue));
    }

    /**
     * Retrieve a batch operation.
     * Retrieve a batch operation
     */
    async retrieve(requestParameters: RetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BatchOperation> {
        const response = await this.retrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ImportFileResourceTypeEnum = {
    Billing: 'billing',
    Order: 'order',
    Shipment: 'shipment',
    Tracking: 'tracking'
} as const;
export type ImportFileResourceTypeEnum = typeof ImportFileResourceTypeEnum[keyof typeof ImportFileResourceTypeEnum];
