/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022.8.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DocumentUploadData,
  DocumentUploadRecord,
  DocumentUploadRecords,
  ErrorMessages,
  ErrorResponse,
} from '../models';
import {
    DocumentUploadDataFromJSON,
    DocumentUploadDataToJSON,
    DocumentUploadRecordFromJSON,
    DocumentUploadRecordToJSON,
    DocumentUploadRecordsFromJSON,
    DocumentUploadRecordsToJSON,
    ErrorMessagesFromJSON,
    ErrorMessagesToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
} from '../models';

export interface RetrieveRequest {
    id: string;
}

export interface UploadRequest {
    documentUploadData: DocumentUploadData;
}

/**
 * 
 */
export class DocumentsApi extends runtime.BaseAPI {

    /**
     * Retrieve all shipping document upload records.
     * List all upload records
     */
    async listRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentUploadRecords>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/documents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentUploadRecordsFromJSON(jsonValue));
    }

    /**
     * Retrieve all shipping document upload records.
     * List all upload records
     */
    async list(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentUploadRecords> {
        const response = await this.listRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a shipping document upload record.
     * Retrieve an upload record
     */
    async retrieveRaw(requestParameters: RetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentUploadRecord>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/documents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentUploadRecordFromJSON(jsonValue));
    }

    /**
     * Retrieve a shipping document upload record.
     * Retrieve an upload record
     */
    async retrieve(requestParameters: RetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentUploadRecord> {
        const response = await this.retrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload a shipping document.
     * Upload documents
     */
    async uploadRaw(requestParameters: UploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DocumentUploadRecord>> {
        if (requestParameters.documentUploadData === null || requestParameters.documentUploadData === undefined) {
            throw new runtime.RequiredError('documentUploadData','Required parameter requestParameters.documentUploadData was null or undefined when calling upload.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/documents`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DocumentUploadDataToJSON(requestParameters.documentUploadData),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DocumentUploadRecordFromJSON(jsonValue));
    }

    /**
     * Upload a shipping document.
     * Upload documents
     */
    async upload(requestParameters: UploadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DocumentUploadRecord> {
        const response = await this.uploadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
