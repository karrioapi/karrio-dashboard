/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022.8.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorMessages,
  ErrorResponse,
  TrackerList,
  TrackingData,
  TrackingStatus,
} from '../models';
import {
    ErrorMessagesFromJSON,
    ErrorMessagesToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    TrackerListFromJSON,
    TrackerListToJSON,
    TrackingDataFromJSON,
    TrackingDataToJSON,
    TrackingStatusFromJSON,
    TrackingStatusToJSON,
} from '../models';

export interface AddRequest {
    trackingData: TrackingData;
    hub?: string;
}

export interface CreateRequest {
    carrierName: string;
    carrierName2: CreateCarrierNameEnum;
    trackingNumber: string;
    hub?: string;
}

export interface ListRequest {
    carrierName?: ListCarrierNameEnum;
    createdAfter?: Date;
    createdBefore?: Date;
    status?: ListStatusEnum;
    trackingNumber?: string;
}

export interface RemoveRequest {
    idOrTrackingNumber: string;
}

export interface RetrievesRequest {
    idOrTrackingNumber: string;
}

/**
 * 
 */
export class TrackersApi extends runtime.BaseAPI {

    /**
     * This API creates or retrieves (if existent) a tracking status object containing the details and events of a shipping in progress.
     * Add a package tracker
     */
    async addRaw(requestParameters: AddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackingStatus>> {
        if (requestParameters.trackingData === null || requestParameters.trackingData === undefined) {
            throw new runtime.RequiredError('trackingData','Required parameter requestParameters.trackingData was null or undefined when calling add.');
        }

        const queryParameters: any = {};

        if (requestParameters.hub !== undefined) {
            queryParameters['hub'] = requestParameters.hub;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/trackers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TrackingDataToJSON(requestParameters.trackingData),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackingStatusFromJSON(jsonValue));
    }

    /**
     * This API creates or retrieves (if existent) a tracking status object containing the details and events of a shipping in progress.
     * Add a package tracker
     */
    async add(requestParameters: AddRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackingStatus> {
        const response = await this.addRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * This API creates or retrieves (if existent) a tracking status object containing the details and events of a shipping in progress.
     * Create a package tracker
     */
    async createRaw(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackingStatus>> {
        if (requestParameters.carrierName === null || requestParameters.carrierName === undefined) {
            throw new runtime.RequiredError('carrierName','Required parameter requestParameters.carrierName was null or undefined when calling create.');
        }

        if (requestParameters.carrierName2 === null || requestParameters.carrierName2 === undefined) {
            throw new runtime.RequiredError('carrierName2','Required parameter requestParameters.carrierName2 was null or undefined when calling create.');
        }

        if (requestParameters.trackingNumber === null || requestParameters.trackingNumber === undefined) {
            throw new runtime.RequiredError('trackingNumber','Required parameter requestParameters.trackingNumber was null or undefined when calling create.');
        }

        const queryParameters: any = {};

        if (requestParameters.carrierName2 !== undefined) {
            queryParameters['carrier_name'] = requestParameters.carrierName2;
        }

        if (requestParameters.hub !== undefined) {
            queryParameters['hub'] = requestParameters.hub;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/trackers/{carrier_name}/{tracking_number}`.replace(`{${"carrier_name"}}`, encodeURIComponent(String(requestParameters.carrierName))).replace(`{${"tracking_number"}}`, encodeURIComponent(String(requestParameters.trackingNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackingStatusFromJSON(jsonValue));
    }

    /**
     * This API creates or retrieves (if existent) a tracking status object containing the details and events of a shipping in progress.
     * Create a package tracker
     */
    async create(requestParameters: CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackingStatus> {
        const response = await this.createRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all shipment trackers.
     * List all package trackers
     */
    async listRaw(requestParameters: ListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackerList>> {
        const queryParameters: any = {};

        if (requestParameters.carrierName !== undefined) {
            queryParameters['carrier_name'] = requestParameters.carrierName;
        }

        if (requestParameters.createdAfter !== undefined) {
            queryParameters['created_after'] = (requestParameters.createdAfter as any).toISOString();
        }

        if (requestParameters.createdBefore !== undefined) {
            queryParameters['created_before'] = (requestParameters.createdBefore as any).toISOString();
        }

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.trackingNumber !== undefined) {
            queryParameters['tracking_number'] = requestParameters.trackingNumber;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/trackers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackerListFromJSON(jsonValue));
    }

    /**
     * Retrieve all shipment trackers.
     * List all package trackers
     */
    async list(requestParameters: ListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackerList> {
        const response = await this.listRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Discard a package tracker.
     * Discard a package tracker
     */
    async removeRaw(requestParameters: RemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackingStatus>> {
        if (requestParameters.idOrTrackingNumber === null || requestParameters.idOrTrackingNumber === undefined) {
            throw new runtime.RequiredError('idOrTrackingNumber','Required parameter requestParameters.idOrTrackingNumber was null or undefined when calling remove.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/trackers/{id_or_tracking_number}`.replace(`{${"id_or_tracking_number"}}`, encodeURIComponent(String(requestParameters.idOrTrackingNumber))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackingStatusFromJSON(jsonValue));
    }

    /**
     * Discard a package tracker.
     * Discard a package tracker
     */
    async remove(requestParameters: RemoveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackingStatus> {
        const response = await this.removeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a package tracker
     * Retrieves a package tracker
     */
    async retrievesRaw(requestParameters: RetrievesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TrackingStatus>> {
        if (requestParameters.idOrTrackingNumber === null || requestParameters.idOrTrackingNumber === undefined) {
            throw new runtime.RequiredError('idOrTrackingNumber','Required parameter requestParameters.idOrTrackingNumber was null or undefined when calling retrieves.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/trackers/{id_or_tracking_number}`.replace(`{${"id_or_tracking_number"}}`, encodeURIComponent(String(requestParameters.idOrTrackingNumber))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TrackingStatusFromJSON(jsonValue));
    }

    /**
     * Retrieve a package tracker
     * Retrieves a package tracker
     */
    async retrieves(requestParameters: RetrievesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TrackingStatus> {
        const response = await this.retrievesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const CreateCarrierNameEnum = {
    AmazonMws: 'amazon_mws',
    Aramex: 'aramex',
    Australiapost: 'australiapost',
    Canadapost: 'canadapost',
    Canpar: 'canpar',
    Chronopost: 'chronopost',
    DhlExpress: 'dhl_express',
    DhlPoland: 'dhl_poland',
    DhlUniversal: 'dhl_universal',
    Dicom: 'dicom',
    Dpdhl: 'dpdhl',
    Fedex: 'fedex',
    Generic: 'generic',
    Purolator: 'purolator',
    Royalmail: 'royalmail',
    Sendle: 'sendle',
    SfExpress: 'sf_express',
    Tnt: 'tnt',
    Ups: 'ups',
    UpsFreight: 'ups_freight',
    Usps: 'usps',
    UspsInternational: 'usps_international',
    Yanwen: 'yanwen',
    Yunexpress: 'yunexpress'
} as const;
export type CreateCarrierNameEnum = typeof CreateCarrierNameEnum[keyof typeof CreateCarrierNameEnum];
/**
 * @export
 */
export const ListCarrierNameEnum = {
    AmazonMws: 'amazon_mws',
    Aramex: 'aramex',
    Australiapost: 'australiapost',
    Canadapost: 'canadapost',
    Canpar: 'canpar',
    Chronopost: 'chronopost',
    DhlExpress: 'dhl_express',
    DhlPoland: 'dhl_poland',
    DhlUniversal: 'dhl_universal',
    Dicom: 'dicom',
    Dpdhl: 'dpdhl',
    Easypost: 'easypost',
    Eshipper: 'eshipper',
    Fedex: 'fedex',
    Freightcom: 'freightcom',
    Generic: 'generic',
    Purolator: 'purolator',
    Royalmail: 'royalmail',
    Sendle: 'sendle',
    SfExpress: 'sf_express',
    Tnt: 'tnt',
    Ups: 'ups',
    UpsFreight: 'ups_freight',
    Usps: 'usps',
    UspsInternational: 'usps_international',
    Yanwen: 'yanwen',
    Yunexpress: 'yunexpress'
} as const;
export type ListCarrierNameEnum = typeof ListCarrierNameEnum[keyof typeof ListCarrierNameEnum];
/**
 * @export
 */
export const ListStatusEnum = {
    Delivered: 'delivered',
    InTransit: 'in_transit',
    Incident: 'incident',
    Pending: 'pending',
    Unknown: 'unknown'
} as const;
export type ListStatusEnum = typeof ListStatusEnum[keyof typeof ListStatusEnum];
