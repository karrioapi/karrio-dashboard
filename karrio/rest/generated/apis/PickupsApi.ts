/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022.8.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorMessages,
  ErrorResponse,
  Pickup,
  PickupCancelData,
  PickupData,
  PickupList,
  PickupUpdateData,
} from '../models';
import {
    ErrorMessagesFromJSON,
    ErrorMessagesToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PickupFromJSON,
    PickupToJSON,
    PickupCancelDataFromJSON,
    PickupCancelDataToJSON,
    PickupDataFromJSON,
    PickupDataToJSON,
    PickupListFromJSON,
    PickupListToJSON,
    PickupUpdateDataFromJSON,
    PickupUpdateDataToJSON,
} from '../models';

export interface CancelRequest {
    id: string;
    pickupCancelData?: PickupCancelData;
}

export interface RetrieveRequest {
    id: string;
}

export interface ScheduleRequest {
    carrierName: string;
    pickupData: PickupData;
}

export interface UpdateRequest {
    id: string;
    pickupUpdateData: PickupUpdateData;
}

/**
 * 
 */
export class PickupsApi extends runtime.BaseAPI {

    /**
     * Cancel a pickup of one or more shipments.
     * Cancel a pickup
     */
    async cancelRaw(requestParameters: CancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pickup>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling cancel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/pickups/{id}/cancel`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PickupCancelDataToJSON(requestParameters.pickupCancelData),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PickupFromJSON(jsonValue));
    }

    /**
     * Cancel a pickup of one or more shipments.
     * Cancel a pickup
     */
    async cancel(requestParameters: CancelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pickup> {
        const response = await this.cancelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve all scheduled pickups.
     * List shipment pickups
     */
    async listRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PickupList>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/pickups`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PickupListFromJSON(jsonValue));
    }

    /**
     * Retrieve all scheduled pickups.
     * List shipment pickups
     */
    async list(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PickupList> {
        const response = await this.listRaw(initOverrides);
        return await response.value();
    }

    /**
     * Retrieve a scheduled pickup.
     * Retrieve a pickup
     */
    async retrieveRaw(requestParameters: RetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pickup>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/pickups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PickupFromJSON(jsonValue));
    }

    /**
     * Retrieve a scheduled pickup.
     * Retrieve a pickup
     */
    async retrieve(requestParameters: RetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pickup> {
        const response = await this.retrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Schedule a pickup for one or many shipments with labels already purchased.
     * Schedule a pickup
     */
    async scheduleRaw(requestParameters: ScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pickup>> {
        if (requestParameters.carrierName === null || requestParameters.carrierName === undefined) {
            throw new runtime.RequiredError('carrierName','Required parameter requestParameters.carrierName was null or undefined when calling schedule.');
        }

        if (requestParameters.pickupData === null || requestParameters.pickupData === undefined) {
            throw new runtime.RequiredError('pickupData','Required parameter requestParameters.pickupData was null or undefined when calling schedule.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/pickups/{carrier_name}/schedule`.replace(`{${"carrier_name"}}`, encodeURIComponent(String(requestParameters.carrierName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PickupDataToJSON(requestParameters.pickupData),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PickupFromJSON(jsonValue));
    }

    /**
     * Schedule a pickup for one or many shipments with labels already purchased.
     * Schedule a pickup
     */
    async schedule(requestParameters: ScheduleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pickup> {
        const response = await this.scheduleRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Modify a pickup for one or many shipments with labels already purchased.
     * Update a pickup
     */
    async updateRaw(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Pickup>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling update.');
        }

        if (requestParameters.pickupUpdateData === null || requestParameters.pickupUpdateData === undefined) {
            throw new runtime.RequiredError('pickupUpdateData','Required parameter requestParameters.pickupUpdateData was null or undefined when calling update.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // JWT authentication
        }

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2", []);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Token authentication
        }

        if (this.configuration && (this.configuration.username !== undefined || this.configuration.password !== undefined)) {
            headerParameters["Authorization"] = "Basic " + btoa(this.configuration.username + ":" + this.configuration.password);
        }
        const response = await this.request({
            path: `/v1/pickups/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PickupUpdateDataToJSON(requestParameters.pickupUpdateData),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PickupFromJSON(jsonValue));
    }

    /**
     * Modify a pickup for one or many shipments with labels already purchased.
     * Update a pickup
     */
    async update(requestParameters: UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Pickup> {
        const response = await this.updateRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
