/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022.8.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Commodity } from './Commodity';
import {
    CommodityFromJSON,
    CommodityFromJSONTyped,
    CommodityToJSON,
} from './Commodity';
import type { CustomsContentType } from './CustomsContentType';
import {
    CustomsContentTypeFromJSON,
    CustomsContentTypeFromJSONTyped,
    CustomsContentTypeToJSON,
} from './CustomsContentType';
import type { CustomsDuty } from './CustomsDuty';
import {
    CustomsDutyFromJSON,
    CustomsDutyFromJSONTyped,
    CustomsDutyToJSON,
} from './CustomsDuty';
import type { CustomsIncoterm } from './CustomsIncoterm';
import {
    CustomsIncotermFromJSON,
    CustomsIncotermFromJSONTyped,
    CustomsIncotermToJSON,
} from './CustomsIncoterm';

/**
 * The customs details.<br/>
 *         **Note that this is required for the shipment of an international Dutiable parcel.**
 *         
 * @export
 * @interface ShipmentCustoms
 */
export interface ShipmentCustoms {
    /**
     * A unique identifier
     * @type {string}
     * @memberof ShipmentCustoms
     */
    id?: string;
    /**
     * The parcel content items
     * @type {Array<Commodity>}
     * @memberof ShipmentCustoms
     */
    commodities?: Array<Commodity>;
    /**
     * 
     * @type {CustomsDuty}
     * @memberof ShipmentCustoms
     */
    duty?: CustomsDuty | null;
    /**
     * 
     * @type {CustomsContentType}
     * @memberof ShipmentCustoms
     */
    content_type?: CustomsContentType | null;
    /**
     * 
     * @type {string}
     * @memberof ShipmentCustoms
     */
    content_description?: string | null;
    /**
     * 
     * @type {CustomsIncoterm}
     * @memberof ShipmentCustoms
     */
    incoterm?: CustomsIncoterm | null;
    /**
     * The invoice reference number
     * @type {string}
     * @memberof ShipmentCustoms
     */
    invoice?: string | null;
    /**
     * The invoice date
     * @type {string}
     * @memberof ShipmentCustoms
     */
    invoice_date?: string | null;
    /**
     * Indicates if the shipment is commercial
     * @type {boolean}
     * @memberof ShipmentCustoms
     */
    commercial_invoice?: boolean | null;
    /**
     * Indicate that signer certified confirmed all
     * @type {boolean}
     * @memberof ShipmentCustoms
     */
    certify?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof ShipmentCustoms
     */
    signer?: string | null;
    /**
     * <details>
     *         <summary>Customs identification options.</summary>
     * 
     *         {
     *             "aes": "5218487281",
     *             "eel_pfc": "5218487281",
     *             "license_number": "5218487281",
     *             "certificate_number": "5218487281",
     *             "nip_number": "5218487281",
     *             "eori_number": "5218487281",
     *             "vat_registration_number": "5218487281",
     *         }
     *         
     * @type {{ [key: string]: any; }}
     * @memberof ShipmentCustoms
     */
    options?: { [key: string]: any; };
    /**
     * Specifies the object type
     * @type {string}
     * @memberof ShipmentCustoms
     */
    object_type?: string;
}

/**
 * Check if a given object implements the ShipmentCustoms interface.
 */
export function instanceOfShipmentCustoms(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function ShipmentCustomsFromJSON(json: any): ShipmentCustoms {
    return ShipmentCustomsFromJSONTyped(json, false);
}

export function ShipmentCustomsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ShipmentCustoms {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'commodities': !exists(json, 'commodities') ? undefined : ((json['commodities'] as Array<any>).map(CommodityFromJSON)),
        'duty': !exists(json, 'duty') ? undefined : CustomsDutyFromJSON(json['duty']),
        'content_type': !exists(json, 'content_type') ? undefined : CustomsContentTypeFromJSON(json['content_type']),
        'content_description': !exists(json, 'content_description') ? undefined : json['content_description'],
        'incoterm': !exists(json, 'incoterm') ? undefined : CustomsIncotermFromJSON(json['incoterm']),
        'invoice': !exists(json, 'invoice') ? undefined : json['invoice'],
        'invoice_date': !exists(json, 'invoice_date') ? undefined : json['invoice_date'],
        'commercial_invoice': !exists(json, 'commercial_invoice') ? undefined : json['commercial_invoice'],
        'certify': !exists(json, 'certify') ? undefined : json['certify'],
        'signer': !exists(json, 'signer') ? undefined : json['signer'],
        'options': !exists(json, 'options') ? undefined : json['options'],
        'object_type': !exists(json, 'object_type') ? undefined : json['object_type'],
    };
}

export function ShipmentCustomsToJSON(value?: ShipmentCustoms | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'commodities': value.commodities === undefined ? undefined : ((value.commodities as Array<any>).map(CommodityToJSON)),
        'duty': CustomsDutyToJSON(value.duty),
        'content_type': CustomsContentTypeToJSON(value.content_type),
        'content_description': value.content_description,
        'incoterm': CustomsIncotermToJSON(value.incoterm),
        'invoice': value.invoice,
        'invoice_date': value.invoice_date,
        'commercial_invoice': value.commercial_invoice,
        'certify': value.certify,
        'signer': value.signer,
        'options': value.options,
        'object_type': value.object_type,
    };
}

