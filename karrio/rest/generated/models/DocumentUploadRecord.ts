/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022.8.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { DocumentDetails } from './DocumentDetails';
import {
    DocumentDetailsFromJSON,
    DocumentDetailsFromJSONTyped,
    DocumentDetailsToJSON,
} from './DocumentDetails';
import type { Message } from './Message';
import {
    MessageFromJSON,
    MessageFromJSONTyped,
    MessageToJSON,
} from './Message';

/**
 * 
 * @export
 * @interface DocumentUploadRecord
 */
export interface DocumentUploadRecord {
    /**
     * A unique identifier
     * @type {string}
     * @memberof DocumentUploadRecord
     */
    id?: string;
    /**
     * The shipment carrier
     * @type {string}
     * @memberof DocumentUploadRecord
     */
    carrier_name?: string | null;
    /**
     * The shipment carrier configured identifier
     * @type {string}
     * @memberof DocumentUploadRecord
     */
    carrier_id?: string | null;
    /**
     * the carrier shipping document ids
     * @type {Array<DocumentDetails>}
     * @memberof DocumentUploadRecord
     */
    documents?: Array<DocumentDetails>;
    /**
     * provider specific metadata
     * @type {{ [key: string]: any; }}
     * @memberof DocumentUploadRecord
     */
    meta?: { [key: string]: any; } | null;
    /**
     * Shipping document file reference
     * @type {string}
     * @memberof DocumentUploadRecord
     */
    reference?: string | null;
    /**
     * The list of note or warning messages
     * @type {Array<Message>}
     * @memberof DocumentUploadRecord
     */
    messages?: Array<Message>;
}

/**
 * Check if a given object implements the DocumentUploadRecord interface.
 */
export function instanceOfDocumentUploadRecord(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function DocumentUploadRecordFromJSON(json: any): DocumentUploadRecord {
    return DocumentUploadRecordFromJSONTyped(json, false);
}

export function DocumentUploadRecordFromJSONTyped(json: any, ignoreDiscriminator: boolean): DocumentUploadRecord {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'carrier_name': !exists(json, 'carrier_name') ? undefined : json['carrier_name'],
        'carrier_id': !exists(json, 'carrier_id') ? undefined : json['carrier_id'],
        'documents': !exists(json, 'documents') ? undefined : ((json['documents'] as Array<any>).map(DocumentDetailsFromJSON)),
        'meta': !exists(json, 'meta') ? undefined : json['meta'],
        'reference': !exists(json, 'reference') ? undefined : json['reference'],
        'messages': !exists(json, 'messages') ? undefined : ((json['messages'] as Array<any>).map(MessageFromJSON)),
    };
}

export function DocumentUploadRecordToJSON(value?: DocumentUploadRecord | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'carrier_name': value.carrier_name,
        'carrier_id': value.carrier_id,
        'documents': value.documents === undefined ? undefined : ((value.documents as Array<any>).map(DocumentDetailsToJSON)),
        'meta': value.meta,
        'reference': value.reference,
        'messages': value.messages === undefined ? undefined : ((value.messages as Array<any>).map(MessageToJSON)),
    };
}

