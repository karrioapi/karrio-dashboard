/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022.8.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LineItem } from './LineItem';
import {
    LineItemFromJSON,
    LineItemFromJSONTyped,
    LineItemToJSON,
} from './LineItem';
import type { OrderBillingAddress } from './OrderBillingAddress';
import {
    OrderBillingAddressFromJSON,
    OrderBillingAddressFromJSONTyped,
    OrderBillingAddressToJSON,
} from './OrderBillingAddress';
import type { OrderShippingFrom } from './OrderShippingFrom';
import {
    OrderShippingFromFromJSON,
    OrderShippingFromFromJSONTyped,
    OrderShippingFromToJSON,
} from './OrderShippingFrom';
import type { OrderShippingTo } from './OrderShippingTo';
import {
    OrderShippingToFromJSON,
    OrderShippingToFromJSONTyped,
    OrderShippingToToJSON,
} from './OrderShippingTo';
import type { OrderStatusEnum } from './OrderStatusEnum';
import {
    OrderStatusEnumFromJSON,
    OrderStatusEnumFromJSONTyped,
    OrderStatusEnumToJSON,
} from './OrderStatusEnum';
import type { Shipment } from './Shipment';
import {
    ShipmentFromJSON,
    ShipmentFromJSONTyped,
    ShipmentToJSON,
} from './Shipment';

/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * A unique identifier
     * @type {string}
     * @memberof Order
     */
    id?: string;
    /**
     * Specifies the object type
     * @type {string}
     * @memberof Order
     */
    object_type?: string;
    /**
     * The source' order id.
     * @type {string}
     * @memberof Order
     */
    order_id: string;
    /**
     * The order date. format: `YYYY-MM-DD`
     * @type {string}
     * @memberof Order
     */
    order_date?: string | null;
    /**
     * The order's source.
     * @type {string}
     * @memberof Order
     */
    source?: string;
    /**
     * The order status.
     * @type {OrderStatusEnum}
     * @memberof Order
     */
    status?: OrderStatusEnum;
    /**
     * 
     * @type {OrderShippingTo}
     * @memberof Order
     */
    shipping_to: OrderShippingTo;
    /**
     * 
     * @type {OrderShippingFrom}
     * @memberof Order
     */
    shipping_from?: OrderShippingFrom | null;
    /**
     * 
     * @type {OrderBillingAddress}
     * @memberof Order
     */
    billing_address?: OrderBillingAddress | null;
    /**
     * The order line items.
     * @type {Array<LineItem>}
     * @memberof Order
     */
    line_items: Array<LineItem>;
    /**
     * <details>
     *         <summary>The options available for the order shipments.</summary>
     * 
     *         {
     *             "currency": "USD",
     *             "paid_by": "third_party",
     *             "payment_account_number": "123456789",
     *             "duty_paid_by": "third_party",
     *             "duty_account_number": "123456789",
     *             "invoice_number": "123456789",
     *             "invoice_date": "2020-01-01",
     *             "single_item_per_parcel": true,
     *             "carrier_ids": ["canadapost-test"],
     *         }
     *         
     * @type {{ [key: string]: any; }}
     * @memberof Order
     */
    options?: { [key: string]: any; } | null;
    /**
     * User metadata for the order.
     * @type {{ [key: string]: any; }}
     * @memberof Order
     */
    metadata?: { [key: string]: any; };
    /**
     * The shipments associated with the order.
     * @type {Array<Shipment>}
     * @memberof Order
     */
    shipments?: Array<Shipment>;
    /**
     * Specify whether the order is in test mode or not.
     * @type {boolean}
     * @memberof Order
     */
    test_mode: boolean;
    /**
     * The shipment creation datetime.<br/>
     *         Date Format: `YYYY-MM-DD HH:MM:SS.mmmmmmz`
     *         
     * @type {string}
     * @memberof Order
     */
    created_at: string;
}

/**
 * Check if a given object implements the Order interface.
 */
export function instanceOfOrder(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "order_id" in value;
    isInstance = isInstance && "shipping_to" in value;
    isInstance = isInstance && "line_items" in value;
    isInstance = isInstance && "test_mode" in value;
    isInstance = isInstance && "created_at" in value;

    return isInstance;
}

export function OrderFromJSON(json: any): Order {
    return OrderFromJSONTyped(json, false);
}

export function OrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Order {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'object_type': !exists(json, 'object_type') ? undefined : json['object_type'],
        'order_id': json['order_id'],
        'order_date': !exists(json, 'order_date') ? undefined : json['order_date'],
        'source': !exists(json, 'source') ? undefined : json['source'],
        'status': !exists(json, 'status') ? undefined : OrderStatusEnumFromJSON(json['status']),
        'shipping_to': OrderShippingToFromJSON(json['shipping_to']),
        'shipping_from': !exists(json, 'shipping_from') ? undefined : OrderShippingFromFromJSON(json['shipping_from']),
        'billing_address': !exists(json, 'billing_address') ? undefined : OrderBillingAddressFromJSON(json['billing_address']),
        'line_items': ((json['line_items'] as Array<any>).map(LineItemFromJSON)),
        'options': !exists(json, 'options') ? undefined : json['options'],
        'metadata': !exists(json, 'metadata') ? undefined : json['metadata'],
        'shipments': !exists(json, 'shipments') ? undefined : ((json['shipments'] as Array<any>).map(ShipmentFromJSON)),
        'test_mode': json['test_mode'],
        'created_at': json['created_at'],
    };
}

export function OrderToJSON(value?: Order | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'object_type': value.object_type,
        'order_id': value.order_id,
        'order_date': value.order_date,
        'source': value.source,
        'status': OrderStatusEnumToJSON(value.status),
        'shipping_to': OrderShippingToToJSON(value.shipping_to),
        'shipping_from': OrderShippingFromToJSON(value.shipping_from),
        'billing_address': OrderBillingAddressToJSON(value.billing_address),
        'line_items': ((value.line_items as Array<any>).map(LineItemToJSON)),
        'options': value.options,
        'metadata': value.metadata,
        'shipments': value.shipments === undefined ? undefined : ((value.shipments as Array<any>).map(ShipmentToJSON)),
        'test_mode': value.test_mode,
        'created_at': value.created_at,
    };
}

