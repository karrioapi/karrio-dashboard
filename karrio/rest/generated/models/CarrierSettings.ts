/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022.8.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CarrierNameEnum } from './CarrierNameEnum';
import {
    CarrierNameEnumFromJSON,
    CarrierNameEnumFromJSONTyped,
    CarrierNameEnumToJSON,
} from './CarrierNameEnum';

/**
 * 
 * @export
 * @interface CarrierSettings
 */
export interface CarrierSettings {
    /**
     * A unique address identifier
     * @type {string}
     * @memberof CarrierSettings
     */
    id: string;
    /**
     * Indicates a carrier (type)
     * @type {CarrierNameEnum}
     * @memberof CarrierSettings
     */
    carrier_name: CarrierNameEnum;
    /**
     * Indicates a specific carrier configuration name.
     * @type {string}
     * @memberof CarrierSettings
     */
    carrier_id: string;
    /**
     * The test flag indicates whether to use a carrier configured for test.
     * @type {boolean}
     * @memberof CarrierSettings
     */
    test_mode: boolean;
    /**
     * The active flag indicates whether the carrier account is active or not.
     * @type {boolean}
     * @memberof CarrierSettings
     */
    active: boolean;
    /**
     * Specifies the object type
     * @type {string}
     * @memberof CarrierSettings
     */
    object_type?: string;
}

/**
 * Check if a given object implements the CarrierSettings interface.
 */
export function instanceOfCarrierSettings(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "carrier_name" in value;
    isInstance = isInstance && "carrier_id" in value;
    isInstance = isInstance && "test_mode" in value;
    isInstance = isInstance && "active" in value;

    return isInstance;
}

export function CarrierSettingsFromJSON(json: any): CarrierSettings {
    return CarrierSettingsFromJSONTyped(json, false);
}

export function CarrierSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): CarrierSettings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'carrier_name': CarrierNameEnumFromJSON(json['carrier_name']),
        'carrier_id': json['carrier_id'],
        'test_mode': json['test_mode'],
        'active': json['active'],
        'object_type': !exists(json, 'object_type') ? undefined : json['object_type'],
    };
}

export function CarrierSettingsToJSON(value?: CarrierSettings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'carrier_name': CarrierNameEnumToJSON(value.carrier_name),
        'carrier_id': value.carrier_id,
        'test_mode': value.test_mode,
        'active': value.active,
        'object_type': value.object_type,
    };
}

