/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2022.8.9
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { LabelTypeEnum } from './LabelTypeEnum';
import {
    LabelTypeEnumFromJSON,
    LabelTypeEnumFromJSONTyped,
    LabelTypeEnumToJSON,
} from './LabelTypeEnum';
import type { ParcelData } from './ParcelData';
import {
    ParcelDataFromJSON,
    ParcelDataFromJSONTyped,
    ParcelDataToJSON,
} from './ParcelData';
import type { Rate } from './Rate';
import {
    RateFromJSON,
    RateFromJSONTyped,
    RateToJSON,
} from './Rate';
import type { ShipmentDataCustoms } from './ShipmentDataCustoms';
import {
    ShipmentDataCustomsFromJSON,
    ShipmentDataCustomsFromJSONTyped,
    ShipmentDataCustomsToJSON,
} from './ShipmentDataCustoms';
import type { ShipmentDataShipper } from './ShipmentDataShipper';
import {
    ShipmentDataShipperFromJSON,
    ShipmentDataShipperFromJSONTyped,
    ShipmentDataShipperToJSON,
} from './ShipmentDataShipper';
import type { ShipmentPayment } from './ShipmentPayment';
import {
    ShipmentPaymentFromJSON,
    ShipmentPaymentFromJSONTyped,
    ShipmentPaymentToJSON,
} from './ShipmentPayment';

/**
 * 
 * @export
 * @interface ShippingRequest
 */
export interface ShippingRequest {
    /**
     * 
     * @type {ShipmentDataShipper}
     * @memberof ShippingRequest
     */
    shipper: ShipmentDataShipper;
    /**
     * 
     * @type {ShipmentDataShipper}
     * @memberof ShippingRequest
     */
    recipient: ShipmentDataShipper;
    /**
     * The shipment's parcels
     * @type {Array<ParcelData>}
     * @memberof ShippingRequest
     */
    parcels: Array<ParcelData>;
    /**
     * <details>
     *         <summary>The options available for the shipment.</summary>
     * 
     *         {
     *             "currency": "USD",
     *             "insurance": 100.00,
     *             "cash_on_delivery": 30.00,
     *             "shipment_date": "2020-01-01",
     *             "dangerous_good": true,
     *             "declared_value": 150.00,
     *             "email_notification": true,
     *             "email_notification_to": "shipper@mail.com",
     *             "signature_confirmation": true,
     *         }
     *         
     * @type {{ [key: string]: any; }}
     * @memberof ShippingRequest
     */
    options?: { [key: string]: any; };
    /**
     * 
     * @type {ShipmentPayment}
     * @memberof ShippingRequest
     */
    payment?: ShipmentPayment;
    /**
     * 
     * @type {ShipmentDataCustoms}
     * @memberof ShippingRequest
     */
    customs?: ShipmentDataCustoms | null;
    /**
     * The shipment reference
     * @type {string}
     * @memberof ShippingRequest
     */
    reference?: string | null;
    /**
     * The shipment label file type.
     * @type {LabelTypeEnum}
     * @memberof ShippingRequest
     */
    label_type?: LabelTypeEnum;
    /**
     * The shipment selected rate.
     * @type {string}
     * @memberof ShippingRequest
     */
    selected_rate_id: string;
    /**
     * The list for shipment rates fetched previously
     * @type {Array<Rate>}
     * @memberof ShippingRequest
     */
    rates: Array<Rate>;
}

/**
 * Check if a given object implements the ShippingRequest interface.
 */
export function instanceOfShippingRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "shipper" in value;
    isInstance = isInstance && "recipient" in value;
    isInstance = isInstance && "parcels" in value;
    isInstance = isInstance && "selected_rate_id" in value;
    isInstance = isInstance && "rates" in value;

    return isInstance;
}

export function ShippingRequestFromJSON(json: any): ShippingRequest {
    return ShippingRequestFromJSONTyped(json, false);
}

export function ShippingRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): ShippingRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'shipper': ShipmentDataShipperFromJSON(json['shipper']),
        'recipient': ShipmentDataShipperFromJSON(json['recipient']),
        'parcels': ((json['parcels'] as Array<any>).map(ParcelDataFromJSON)),
        'options': !exists(json, 'options') ? undefined : json['options'],
        'payment': !exists(json, 'payment') ? undefined : ShipmentPaymentFromJSON(json['payment']),
        'customs': !exists(json, 'customs') ? undefined : ShipmentDataCustomsFromJSON(json['customs']),
        'reference': !exists(json, 'reference') ? undefined : json['reference'],
        'label_type': !exists(json, 'label_type') ? undefined : LabelTypeEnumFromJSON(json['label_type']),
        'selected_rate_id': json['selected_rate_id'],
        'rates': ((json['rates'] as Array<any>).map(RateFromJSON)),
    };
}

export function ShippingRequestToJSON(value?: ShippingRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'shipper': ShipmentDataShipperToJSON(value.shipper),
        'recipient': ShipmentDataShipperToJSON(value.recipient),
        'parcels': ((value.parcels as Array<any>).map(ParcelDataToJSON)),
        'options': value.options,
        'payment': ShipmentPaymentToJSON(value.payment),
        'customs': ShipmentDataCustomsToJSON(value.customs),
        'reference': value.reference,
        'label_type': LabelTypeEnumToJSON(value.label_type),
        'selected_rate_id': value.selected_rate_id,
        'rates': ((value.rates as Array<any>).map(RateToJSON)),
    };
}

